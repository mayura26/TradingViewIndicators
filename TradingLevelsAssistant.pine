//@version=5
// FEATURE: Alert on cross of level
// FEATURE: Symbol on cross of level and reject (lookback of bars?)

// FEATURE: Cross of ema to trigger signal/alert. Cross of fast/slow and above/below confirm gives trigger to short/long

// FEATURE: Supertrend

// FEATURE: DRSI and cross of UVXY

// FEATURE: Identify trend (look at different time periods of ema cross)

// FEATURE: Orderflow oscilator

// FEATURE: ATR

// FEATURE: Expected Range

// FEATURE: Dashboard SPY/SPX

indicator("Trading Levels Assistant", max_labels_count = 500, max_lines_count = 500, overlay=true)

reset_labels = false
if reset_labels
    for labelSel in label.all
        label.delete(labelSel)

// INPUTS

// Define input for ticker
sym1 = input.symbol("CME_MINI:MNQ1!", "Ticker 1", group="Tickers")
sym2 = input.symbol("AMEX:SPY", "Ticker 2", group="Tickers")

// Define input for pivots
sym1Pivots = input("", title="Pivot", group="Ticker 1 Levels (comma delimited)", inline="line1")
sym1BuyLevels = input("", title="  |  Buy", group="Ticker 1 Levels (comma delimited)", inline="line1")
sym1SellLevels = input("", title="Sell ", group="Ticker 1 Levels (comma delimited)", inline="line2")
sym1IntraDayLevels  = input("", title="  |  Intraday", group="Ticker 1 Levels (comma delimited)", inline="line2")
sym2Pivots = input("", title="Pivot", group="Ticker 2 Levels (comma delimited)", inline="line1")
sym2BuyLevels = input("", title="  |  Buy", group="Ticker 2 Levels (comma delimited)", inline="line1")
sym2SellLevels = input("", title="Sell ", group="Ticker 2 Levels (comma delimited)", inline="line2")
sym2IntraDayLevels  = input("", title="  |  Intraday", group="Ticker 2 Levels (comma delimited)", inline="line2")

// Define input for line settings
pivotsColor = input.color(color.purple, title="Pivot Color", group="Level Settings", inline = "pivots")
pivotsLabel = input("Pivot", title="Pivots Label", group="Level Settings", inline = "pivots")
pivotsWidth = input(2, title="    └ Pivots Width", group="Level Settings", inline = "pwidth")

buyColor = input.color(color.rgb(9, 122, 5), title="Buy Level Color", group="Level Settings", inline = "buy")
buyLabel = input("Buy", title="Buy Level Label", group="Level Settings", inline = "buy")
buyWidth = input(2, title="    └ Buy Level Width", group="Level Settings", inline = "bwidth")

sellColor = input.color(color.rgb(161, 33, 33), title="Sell Level  Color", group="Level Settings", inline = "sell")
sellLabel = input("Sell", title="Sell Level Label", group="Level Settings", inline = "sell")
sellWidth = input(2, title="    └ Sell Level Width", group="Level Settings", inline = "swidth")

intraColor = input.color(color.orange, title="Intraday Color", group="Level Settings", inline = "intra")
intraLabel = input("Intra", title="Intraday Label", group="Level Settings", inline = "intra")
intraWidth = input(2, title="    └ Intraday Width", group="Level Settings", inline = "iwidth")

labelOffset = input(15, title="Label Offset", group="General")
buffer = input.float(15.0, title="Level Bounce Buffer [H-L] (%)", group="General", minval=0, maxval=100) // Define a buffer to avoid false positives due to noise
buySellBuffer = input.float(2, title="Buy/Sell Buffer (0.01x)%", group="General",minval=0, maxval=1000) 
lowerTF = input.int(1, title="MA Timeframe", group="General",minval=0, maxval=10) 
showAllConditions = input(false, title="Show Conditions for entry (Debug)", group = "General")
showPastBuySellConditions = input(true, title="Show buy/sell (Replay)", group = "General")

showPivotsBounce = input(true, title=" Show Pivot Level Bounce Symbol   |   ", group="Level Bounce (Pivot)", inline="alert")
alertPivotsBounce = input(true, title="Alert on Pivot Bounce", group="Level Bounce (Pivot)",inline="alert")
includeTrigPivots = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Pivot)", inline="pivot")
includeRevPivots = input(true, title="Trigger Reversal", group="Level Bounce (Pivot)", inline="pivot")

showBuyBounce = input(true, title=" Show Buy Level Bounce Symbol   |   ", group="Level Bounce (Buy)", inline="alert")
alertBuyBounce = input(true, title="Alert on Buy Bounce", group="Level Bounce (Buy)",inline="alert")
includeTrigBuy = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Buy)", inline="Buy")
includeRevBuy = input(true, title="Trigger Reversal", group="Level Bounce (Buy)", inline="Buy")

showSellBounce = input(true, title=" Show Sell Level Bounce Symbol   |   ", group="Level Bounce (Sell)", inline="alert")
alertSellBounce = input(true, title="Alert on Sell Bounce", group="Level Bounce (Sell)",inline="alert")
includeTrigSell = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Sell)", inline="Sell")
includeRevSell = input(true, title="Trigger Reversal", group="Level Bounce (Sell)", inline="Sell")

showIntraBounce = input(true, title=" Show Intra Level Bounce Symbol   |   ", group="Level Bounce (Intra)", inline="alert")
alertIntraBounce = input(true, title="Alert on Intra Bounce", group="Level Bounce (Intra)",inline="alert")
includeTrigIntra = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Intra)", inline="Intra")
includeRevIntra = input(true, title="Trigger Reversal", group="Level Bounce (Intra)", inline="Intra")

// Define EMA/SMA settings
periodFastMA = input(8, title="Fast MA Period", group="Moving Averages", inline="fast")
colorFastMA = input.color(color.new(color.fuchsia,75), title="Fast MA Color", group="Moving Averages", inline="fast")
typeFastMA = input.string("EMA", title="    └ Fast MA Type", options=["EMA", "SMA"], group="Moving Averages", inline="tfast")

periodSlowMA = input(21, title="Slow MA Period", group="Moving Averages", inline="slow")
colorSlowMA = input.color(color.new(color.green,75), title="Slow MA Color", group="Moving Averages", inline="slow")
typeSlowMA = input.string("EMA", title="    └ Slow MA Type", options=["EMA", "SMA"], group="Moving Averages", inline="tslow")

periodConfirmMA = input(13, title="Confirm MA Period", group="Moving Averages", inline="confirm")
colorConfirmMA = input.color(color.new(color.red,75), title="Confirm MA Color", group="Moving Averages", inline="confirm")
typeConfirmMA = input.string("SMA", title="    └ Confirm MA Type", options=["EMA", "SMA"], group="Moving Averages", inline="tconfirm")

alertDirectionalBuySell = input(true, title="Buy/Sell", group="Alerts", inline="main")
alertReversalBuySell = input(true, title="Buy/Sell (Reversal)", group="Alerts", inline="main")
alertCrossBuySell = input(true, title="Buy/Sell (Cross)", group="Alerts", inline="main")

//FUNCTIONS
draw_line(_x1, _y1, _x2, _y2, _xloc, _extend, _color, _style, _width) =>
    dline = line.new(x1=_x1, y1=_y1, x2=_x2, y2=_y2, xloc=_xloc, extend=_extend, color=_color, style=_style, width=_width)
    line.delete(dline[1])

draw_label(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>
    dlabel = label.new(x=_x, y=_y, text=_text, xloc=_xloc, yloc=_yloc, color=_color, style=_style, textcolor=_textcolor, size=_size, textalign=_textalign, tooltip=_tooltip)
    
check_bounce_high(level) =>
    highBounce = high >= level and close < level - (high - low) * (buffer/100) and (open <= level + (high - low) * (buffer/100))

check_bounce_low(level) =>
    lowBounce = low <= level and close > level + (high - low) * (buffer/100) and (open >= level - (high - low) * (buffer/100))

check_levels_low(levels, bounceType, symbolEnabled) =>    
    plotLevels = str.split(levels, ",")
    anyBounce = false
    for level in plotLevels
        if check_bounce_low(str.tonumber(level))
            anyBounce := true
            if symbolEnabled
                draw_label(bar_index, str.tonumber(level), bounceType, xloc.bar_index, yloc.belowbar,  color.green, label.style_label_up, color.white, size.small, text.align_center, '')
    result = anyBounce

check_levels_high(levels, bounceType, symbolEnabled) =>    
    plotLevels = str.split(levels, ",")
    anyBounce = false
    for level in plotLevels
        if check_bounce_high(str.tonumber(level))
            anyBounce := true
            if symbolEnabled
                draw_label(bar_index, str.tonumber(level), bounceType, xloc.bar_index, yloc.abovebar,  color.red, label.style_label_down, color.white, size.small, text.align_center, '')
    result = anyBounce

check_optimal_level(levels, symbolEnabled) =>    
    plotLevels = str.split(levels, ",")
    optLevel = false
    if symbolEnabled
        for level in plotLevels
            if math.abs(str.tonumber(level) - close) < (close * buySellBuffer/10000)
                optLevel := true
                
    result = optLevel

draw_levels(levels, color, width, label, labeloffset) =>
    plotLevels = str.split(levels, ",")
    for level in plotLevels
        draw_line(bar_index, str.tonumber(level), bar_index + labeloffset + 15, str.tonumber(level),  xloc.bar_index, extend.left, color, line.style_solid, width)
        if barstate.islast
            plot_label = label.new(bar_index + labeloffset + 10, str.tonumber(level))
            label.set_text(plot_label, label)
            label.set_style(plot_label, label.style_none)
            label.set_textcolor(plot_label, color)
            label.delete(plot_label[1])
    

// Check if symbol matches the selected ticker
if ticker.standard() == sym1
    draw_levels(sym1Pivots, pivotsColor, pivotsWidth, pivotsLabel, labelOffset)
    draw_levels(sym1BuyLevels, buyColor, buyWidth, buyLabel, labelOffset)
    draw_levels(sym1SellLevels, sellColor, sellWidth, sellLabel, labelOffset)
    draw_levels(sym1IntraDayLevels, intraColor, intraWidth, intraLabel, labelOffset)

if ticker.standard() == sym2
    draw_levels(sym2Pivots, pivotsColor, pivotsWidth, pivotsLabel, labelOffset)
    draw_levels(sym2BuyLevels, buyColor, buyWidth, buyLabel, labelOffset)
    draw_levels(sym2SellLevels, sellColor, sellWidth, sellLabel, labelOffset)
    draw_levels(sym2IntraDayLevels, intraColor, intraWidth, intraLabel, labelOffset)

// Check for bounce off each level in the array
anyPivotSym1BounceUp = false
anyBuySym1BounceUp = false
anySellSym1BounceUp = false
anyIntraSym1BounceUp = false

anyPivotSym1BounceDown = false
anyBuySym1BounceDown = false
anySellSym1BounceDown = false
anyIntraSym1BounceDown = false

anyPivotSym2BounceUp = false
anyBuySym2BounceUp = false
anySellSym2BounceUp = false
anyIntraSym2BounceUp = false

anyPivotSym2BounceDown = false
anyBuySym2BounceDown = false
anySellSym2BounceDown = false
anyIntraSym2BounceDown = false

if ticker.standard() == sym1
    anyPivotSym1BounceUp := check_levels_low(sym1Pivots, pivotsLabel, showPivotsBounce)
    anyPivotSym1BounceDown := check_levels_high(sym1Pivots, pivotsLabel, showPivotsBounce)
    anyBuySym1BounceUp := check_levels_low(sym1BuyLevels, buyLabel, showBuyBounce)
    anyBuySym1BounceDown := check_levels_high(sym1BuyLevels, buyLabel, showBuyBounce)
    anySellSym1BounceUp := check_levels_low(sym1SellLevels, sellLabel, showSellBounce)
    anySellSym1BounceDown := check_levels_high(sym1SellLevels, sellLabel, showSellBounce)
    anyIntraSym1BounceUp := check_levels_low(sym1IntraDayLevels, intraLabel, showIntraBounce)
    anyIntraSym1BounceDown := check_levels_high(sym1IntraDayLevels, intraLabel, showIntraBounce)

if ticker.standard() == sym2
    anyPivotSym2BounceUp := check_levels_low(sym2Pivots, pivotsLabel, showPivotsBounce)
    anyPivotSym2BounceDown := check_levels_high(sym2Pivots, pivotsLabel, showPivotsBounce)
    anyBuySym2BounceUp := check_levels_low(sym2BuyLevels, buyLabel, showBuyBounce)
    anyBuySym2BounceDown := check_levels_high(sym2BuyLevels, buyLabel, showBuyBounce)
    anySellSym2BounceUp := check_levels_low(sym2SellLevels, sellLabel, showSellBounce)
    anySellSym2BounceDown := check_levels_high(sym2SellLevels, sellLabel, showSellBounce)
    anyIntraSym2BounceUp := check_levels_low(sym2IntraDayLevels, intraLabel, showIntraBounce)
    anyIntraSym2BounceDown := check_levels_high(sym2IntraDayLevels, intraLabel, showIntraBounce)

// TODO: Add check if the bounce type is enabled
anyPivotSym1Bounce = anyPivotSym1BounceUp or anyPivotSym1BounceDown
anyBuySym1Bounce = anyBuySym1BounceUp or anyBuySym1BounceDown
anySellSym1Bounce = anySellSym1BounceUp or anySellSym1BounceDown
anyIntraSym1Bounce = anyIntraSym1BounceUp or anyIntraSym1BounceDown

anyPivotSym2Bounce = anyPivotSym2BounceUp or anyPivotSym2BounceDown
anyBuySym2Bounce = anyBuySym2BounceUp or anyBuySym2BounceDown
anySellSym2Bounce = anySellSym2BounceUp or anySellSym2BounceDown
anyIntraSym2Bounce = anyIntraSym2BounceUp or anyIntraSym2BounceDown

anySym1BounceUp = (anyPivotSym1BounceUp and includeTrigPivots) or (anyBuySym1BounceUp and includeTrigBuy) or (anySellSym1BounceUp and includeTrigSell) or (anyIntraSym1BounceUp and includeTrigIntra)
anySym1BounceDown = (anyPivotSym1BounceDown and includeTrigPivots) or (anyBuySym1BounceDown and includeTrigBuy) or (anySellSym1BounceDown and includeTrigSell) or (anyIntraSym1BounceDown and includeTrigIntra)

anySym2BounceUp = (anyPivotSym2BounceUp and includeTrigPivots) or (anyBuySym2BounceUp and includeTrigBuy) or (anySellSym2BounceUp and includeTrigSell) or (anyIntraSym2BounceUp and includeTrigIntra)
anySym2BounceDown = (anyPivotSym2BounceDown and includeTrigPivots) or (anyBuySym2BounceDown and includeTrigBuy) or (anySellSym2BounceDown and includeTrigSell) or (anyIntraSym2BounceDown and includeTrigIntra)

anySym1BounceUpRev = (anyPivotSym1BounceUp and includeRevPivots) or (anyBuySym1BounceUp and includeRevBuy) or (anySellSym1BounceUp and includeRevSell) or (anyIntraSym1BounceUp and includeRevIntra)
anySym1BounceDownRev = (anyPivotSym1BounceDown and includeRevPivots) or (anyBuySym1BounceDown and includeRevBuy) or (anySellSym1BounceDown and includeRevSell) or (anyIntraSym1BounceDown and includeRevIntra)

anySym2BounceUpRev = (anyPivotSym2BounceUp and includeRevPivots) or (anyBuySym2BounceUp and includeRevBuy) or (anySellSym2BounceUp and includeRevSell) or (anyIntraSym2BounceUp and includeRevIntra)
anySym2BounceDownRev = (anyPivotSym2BounceDown and includeRevPivots) or (anyBuySym2BounceDown and includeRevBuy) or (anySellSym2BounceDown and includeRevSell) or (anyIntraSym2BounceDown and includeRevIntra)

// Set up alert
if (anyPivotSym1Bounce or anyPivotSym2Bounce) and alertPivotsBounce
    alert("Bounce off pivot level at" + str.tostring(close), alert.freq_once_per_bar_close)

if (anyBuySym1Bounce or anyBuySym2Bounce) and alertBuyBounce
    alert("Bounce off buy level at" + str.tostring(close), alert.freq_once_per_bar_close)

if (anySellSym1Bounce or anySellSym2Bounce) and alertSellBounce
    alert("Bounce off sell level at" + str.tostring(close), alert.freq_once_per_bar_close)

if (anyIntraSym1Bounce or anyIntraSym2Bounce) and alertIntraBounce
    alert("Bounce off intra level at"  + str.tostring(close), alert.freq_once_per_bar_close)

// Calculate MAs based on user selection
fastMA = typeFastMA == "EMA" ? request.security(syminfo.tickerid, str.tostring(lowerTF), ta.ema(close, periodFastMA)) : request.security(syminfo.tickerid, str.tostring(lowerTF), ta.sma(close, periodFastMA))
slowMA = typeSlowMA == "EMA" ? request.security(syminfo.tickerid, str.tostring(lowerTF), ta.ema(close, periodSlowMA)) : request.security(syminfo.tickerid, str.tostring(lowerTF), ta.sma(close, periodSlowMA))
confirmMA = typeConfirmMA == "EMA" ? ta.ema(close, periodConfirmMA) : ta.sma(close, periodFastMA)

// Plot MAs
plot(fastMA, color=colorFastMA, title="Fast MA")
plot(slowMA, color=colorSlowMA, title="Slow MA")
plot(confirmMA, color=colorConfirmMA, title="Confirm MA")

// Detecting Crosses
fastCrossSlowUp = ta.crossover(fastMA, slowMA)
fastCrossSlowDown = ta.crossunder(fastMA, slowMA)

// Detecting Price relative to Confirm MA
priceAboveConfirm = close > confirmMA
priceBelowConfirm = close < confirmMA
priceOptimalEntryConfirm = math.abs(close - confirmMA) < (close * buySellBuffer/10000)
priceCandleBufferEntry = (high - low) * buffer/100
priceOptimalBufferEntry = (close) * buySellBuffer/10000
priceOptimalEntryLevel = false
priceOptimalEntryLevelReversal = false
if ticker.standard() == sym1
    priceOptimalEntryLevel := check_optimal_level(sym1Pivots, includeTrigPivots) or priceOptimalEntryLevel
    priceOptimalEntryLevel := check_optimal_level(sym1BuyLevels, includeTrigBuy) or priceOptimalEntryLevel
    priceOptimalEntryLevel := check_optimal_level(sym1SellLevels, includeTrigSell) or priceOptimalEntryLevel
    priceOptimalEntryLevel := check_optimal_level(sym1IntraDayLevels, includeTrigIntra) or priceOptimalEntryLevel

buySignal = false
buyReversalSignal = false
sellSignal = false
sellReversalSignal = false
buyCrossSignal = false
sellCrossSignal = false

if ticker.standard() == sym1
    buySignal := priceAboveConfirm and fastMA > slowMA and anySym1BounceUp
    sellSignal := priceBelowConfirm and fastMA < slowMA and anySym1BounceDown 
    buyReversalSignal := priceBelowConfirm and anySym1BounceUpRev
    sellReversalSignal := priceAboveConfirm and anySym1BounceDownRev

lookback = 2
if fastCrossSlowDown
    for i = 0 to lookback
        if anySym1BounceDownRev[i] and priceBelowConfirm
            sellCrossSignal := true

if fastCrossSlowUp
    for i = 0 to lookback
        if anySym1BounceUpRev[i] and priceAboveConfirm
            buyCrossSignal := true

// Debug symbols
if showAllConditions
    if priceOptimalEntryLevel
        draw_label(bar_index, close, 'Optimal Level', xloc.bar_index, yloc.abovebar,  color.aqua, label.style_cross, color.white, size.small, text.align_center, '')
    if fastCrossSlowDown 
        draw_label(bar_index, close, 'DownCross', xloc.bar_index, yloc.abovebar,  color.blue, label.style_cross, color.white, size.small, text.align_center, '')
    if fastCrossSlowUp 
        draw_label(bar_index, close, 'UpCross', xloc.bar_index, yloc.belowbar,  color.blue, label.style_cross, color.white, size.small, text.align_center, '')

buyCondition = priceOptimalEntryConfirm or priceOptimalEntryLevel
sellCondition = priceOptimalEntryConfirm or priceOptimalEntryLevel
buyRevCondition =  priceOptimalEntryLevel
sellRevCondition = priceOptimalEntryLevel
buyCrossCondition =  priceOptimalEntryLevel
sellCrossCondition = priceOptimalEntryLevel

// Symbol when price goes below or above confirm MA
plotshape(series=priceAboveConfirm, style=shape.labelup, location=location.bottom, color= buySignal and (showPastBuySellConditions or (not showPastBuySellConditions and buyCondition))  ? color.green : na, size=size.small)
plotshape(series=priceBelowConfirm, style=shape.triangleup, location=location.bottom, color= buyReversalSignal and (showPastBuySellConditions or (not showPastBuySellConditions and buyRevCondition))   ? color.green : na, size=size.small)
plotshape(series=priceBelowConfirm, style=shape.cross, location=location.bottom, color= buyCrossSignal and (showPastBuySellConditions or (not showPastBuySellConditions and buyCrossCondition))   ? color.green : na, size=size.small)
plotshape(series=priceBelowConfirm, style=shape.labeldown, location=location.top, color= sellSignal and (showPastBuySellConditions or (not showPastBuySellConditions and sellCondition))  ? color.red : na, size=size.small)
plotshape(series=priceAboveConfirm, style=shape.triangledown, location=location.top, color= sellReversalSignal and (showPastBuySellConditions or (not showPastBuySellConditions and sellRevCondition))  ? color.red : na, size=size.small)
plotshape(series=priceAboveConfirm, style=shape.cross, location=location.top, color= sellCrossSignal and (showPastBuySellConditions or (not showPastBuySellConditions and sellCrossCondition))  ? color.red : na, size=size.small)

// Alert Conditions
// TODO: Add alert based on tick box for bounce and Buy/Sell
if buySignal and buyCondition and alertDirectionalBuySell
    alert("Directional Buy Alert", alert.freq_once_per_bar)
if sellSignal and sellCondition and alertDirectionalBuySell
    alert("Directional Sell Alert", alert.freq_once_per_bar)
if buyReversalSignal and buyRevCondition and alertReversalBuySell
    alert("Reversal Buy Alert", alert.freq_once_per_bar)
if sellReversalSignal and sellRevCondition and alertReversalBuySell
    alert("Reversal Sell Alert", alert.freq_once_per_bar)
if buyCrossSignal and buyCrossCondition and alertCrossBuySell
    alert("Cross Buy Alert", alert.freq_once_per_bar)
if sellCrossSignal and sellCrossCondition and alertCrossBuySell
    alert("Cross Sell Alert", alert.freq_once_per_bar)

// Dashboard inputs
show_table      = input.bool(true,"Show Dashboard", group="Dashboard", inline="Table")
tableLocation   = input.string(defval='Bottom right', options=['Top left', 'Top center', 'Top right', 'Bottom left', 'Bottom center', 'Bottom right'], title='| Location', group="Dashboard", inline="Table")
tablePosition   = tableLocation == 'Top left' ? position.top_left : tableLocation == 'Top center' ? position.top_center : tableLocation == 'Top right' ? position.top_right : tableLocation == 'Bottom left' ? position.bottom_left : tableLocation == 'Bottom center' ? position.bottom_center : position.bottom_right
table_font_size       = input.string('Normal', "    └ Font Size", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large'], group="Dashboard", inline = 'line2')
table_bgcolor       = input.color(color.gray, title="Background Color", group="Dashboard", inline="line3")
table_fontcolor       = input.color(color.white, title="  |  Font Color", group="Dashboard", inline="line3")

ticker1_price  = request.security(sym1, timeframe.period, math.round_to_mintick(close))
ticker2_price  = request.security(sym2, timeframe.period, math.round_to_mintick(close))

var displayTable = table.new(tablePosition, 2, 6, border_width=1, bgcolor = table_bgcolor)

f_fillCell(_row, _column,series string _cellText) =>
    switch table_font_size
        "Auto" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.auto)
        "Tiny" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.tiny)
        "Small" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.small)
        "Normal" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.normal)
        "Large" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.large)

f_fillCellColor(_row,_column, color) =>
    table.cell(displayTable,_column,_row, bgcolor=color)

f_fillCellColorText(_row, _column, series string _cellText, color) =>
    switch table_font_size
        "Auto" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.auto)
        "Tiny" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.tiny)
        "Small" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.small)
        "Normal" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.normal)
        "Large" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.large)

extractSymbolName(simple string sym) =>
    pos = str.pos(sym, ":")  // Get position of ":" character
    tkr= str.substring(sym, pos+1)

if barstate.islast and show_table
    f_fillCell(0, 0, "Confirm")
    f_fillCell(1, 0, "Trend")
    f_fillCell(2, 0, extractSymbolName(sym1))
    f_fillCell(3, 0, extractSymbolName(sym2))
    f_fillCell(4, 0, "Entry")

    f_fillCellColor(0,1,priceAboveConfirm ? color.green : color.red)
    f_fillCellColor(1,1,priceAboveConfirm and fastMA > slowMA ? color.green : (priceBelowConfirm  and fastMA < slowMA ? color.red : color.gray))
    f_fillCell(2, 1, str.tostring(ticker1_price))
    f_fillCell(3, 1, str.tostring(ticker2_price))
    f_fillCellColorText(4, 1, str.tostring(priceOptimalBufferEntry), priceOptimalEntryConfirm ? color.green : color.gray)
    //TODO: Add symbol to show trend of both tickers