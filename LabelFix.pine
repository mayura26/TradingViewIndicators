                             
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=5
indicator("lvl", overlay=true)

// Inputs {
i_codes_input   = input.string("", "Levels")
opacity_mulp = math.max(input.float(1.5, "Opacity", 0), 0.5)
width = input.int(3, "Levels Width", 0)
i_col_text_gap = input(3, title="Levels Label Offset")
i_zones_text_gap = input(3, title="Zones Label Offset")
i_text_color = input.color(color.gray, "Text Color")
i_col_sup       = input.color(color.green, "Buy")
i_col_res       = input.color(color.red, "Sell")
i_col_neutral       = input.color(color.gray, "Neutral ")
i_col_pivot      = input.color(color.aqua, "Pivot ")
i_col_major       = input.color(color.yellow, "Major ")
i_col_minor       = input.color(color.gray, "Minor")
i_support_color = input.color(color.green, "Buy Zone Color")
i_resistance_color = input.color(color.red, "Sell Zone Color")
i_chop_color = input.color(color.yellow, "Chop Zone Color")
i_no_trade_color = input.color(color.red, "No Trade Zone Color")
ghost_threshold     = 1

col_x2 = bar_index + i_col_text_gap
zones_x2 = bar_index + i_zones_text_gap


// }

// Functions {
f_trim_array(_array) =>
    for i = 0 to array.size(_array)-1
        if array.get(_array, i) == ""
            array.remove(_array, i)

f_new_line()    => line.new(na, na, na, na, extend=extend.left, style=line.style_solid, xloc=xloc.bar_index) 
f_new_label()   => label.new(na, na, "", textcolor=color.white, style=label.style_none, size=size.normal)
f_new_GZ()      => box.new(na, na, na, na, bgcolor=color.new(color.gray, 80), border_width=0)
// }

// Variables {
var string[]    codes       = str.split(i_codes_input, ";")
var int         codesCount  = na
var line[]      lines       = array.new_line()
var label[]     labels      = array.new_label()
var color lineColor = na
var color zone_color = na


// New array to store prices (for level values)
var float[]     prices         = array.new_float()
var float[]     unique_prices  = array.new_float()
var color[]     colors         = array.new_color()
var box[]       ghost_zones    = array.new_box()
var box[]       zones          = array.new_box()
var label[] zoneLabels = array.new_label()
var box newBox = na
var label newLabel = na // Initialize with 'na' for similar reasons
var label[] levelNoteLabels = array.new_label()

if barstate.isfirst
    f_trim_array(codes) // Remove empty values
    codesCount  := array.size(codes)

    

    if codesCount > 0
        // Create "empty" lines and labelss
        for i = 0 to codesCount-1
            array.push(lines,  f_new_line())
            array.push(labels, f_new_label())
            array.push(ghost_zones, f_new_GZ())


if barstate.islast and codesCount > 0
    // clear zones
    for z in zones
        box.delete(z)
    array.clear(zones)

    for lbl in zoneLabels
        label.delete(lbl)
    array.clear(zoneLabels)
    
    for lbl in levelNoteLabels
        label.delete(lbl)
    array.clear(levelNoteLabels)


    for i = 0 to codesCount-1
        level = array.get(codes, i)
        code = array.get(codes, i)

        if str.contains(code, "-")
            // Parse zone range and optional note
            zone_parts = str.split(code, "*")
            range_parts = str.split(array.get(zone_parts, 0), "-")
            start_price = str.tonumber(array.get(range_parts, 0))
            end_price = str.tonumber(array.get(range_parts, 1))
            zone_type = array.get(zone_parts, 1)
            zone_note = array.size(zone_parts) > 2 ? array.get(zone_parts, 2) : ""
            
            if zone_type == "buy"
                zone_color := i_support_color
            if zone_type == "sell"
                zone_color := i_resistance_color
            if zone_type == "chop"
                zone_color := i_chop_color
            if zone_type == "nogo"
                zone_color := i_no_trade_color
            
            
            // Proceed to create zone box with determined color
            if not na(start_price) and not na(end_price) and not na(zone_color)
                newBox := box.new(left=bar_index, top=start_price, right=bar_index, bottom=end_price, bgcolor=color.new(zone_color, 90), border_width=0)
                box.set_extend(newBox, extend.left)
                array.push(zones, newBox)
                if zone_note != ""
                    newLabel := label.new(zones_x2, (start_price + end_price) / 2, str.tostring(start_price) + "-" + str.tostring(end_price) + " " + zone_note, xloc=xloc.bar_index, yloc=yloc.price, textalign=text.align_left, style=label.style_label_left, textcolor=color(zone_color), size=size.normal)
                    label.set_color(id=newLabel, color=color.new(color.gray, 99))               
                    array.push(zoneLabels, newLabel)
                    
                    
        else
    
            level_parts = str.split(level, "*")
            level_value = str.tonumber(array.get(level_parts, 0))
            // Removed the opacity parsing as it's no longer needed.
            level_type = array.get(level_parts, 1)
            level_note = array.size(level_parts) > 2 ? array.get(level_parts, 2) : ""
            level_opacity = 100 // You can adjust this value as per your requirements.

            positive = level_type == 'positive'
            if not array.includes(prices, level_value)
                array.push(unique_prices, level_value)
            array.push(prices, level_value)

            // Processing level type to determine the color, similar to before but without parsing opacity from input.
            lineObject = array.get(lines, i)

            if level_type == 'buy'
                lineColor := i_col_sup
            if level_type == 'sell'
                lineColor := i_col_res
            if level_type == 'neutral'
                lineColor := i_col_neutral
            if level_type == 'major'
                lineColor := i_col_major
            if level_type == 'minor'
                lineColor := i_col_minor
            if level_type == 'pivot'
                lineColor := i_col_pivot

            if level_note != ""
                newLabel := label.new(col_x2, level_value, str.tostring(level_value) + " " + level_note, xloc=xloc.bar_index, yloc=yloc.price, textalign=text.align_left, style=label.style_label_left, color=color.black, textcolor=color(lineColor), size=size.normal)
                label.set_color(id=newLabel, color=color.new(color.gray, 99))     
                array.push(levelNoteLabels, newLabel)

            color transparentColor = color.new(lineColor, 100 - level_opacity) // Adjust opacity handling here.

            array.push(colors, transparentColor)

            line.set_xy1(lineObject, bar_index-1, level_value)
            line.set_xy2(lineObject, bar_index, level_value) //bar_index    
            line.set_color(lineObject, transparentColor)
            // line.set_extend(lineObject,extend.left)
            if timeframe.isintraday
                line.set_width(lineObject, width)
            else
                line.set_width(lineObject, width * 2)
            


