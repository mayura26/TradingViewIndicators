//@version=5
// BUG: Check if level less greater than close and if so the get fill lower

// FEATURE: Chop detection by looking at lower MA and crossing

// TODO: Bring in ATR trigger as condition

// TODO: Optimise confirm line

// TODO: LOook at differential of EMA (and add a third one) to figure out ending trend etc.

// TODO: Create dynamic pivots based on ER/pivots

// FEATURE: Supertrend

// FEATURE: DRSI and cross of UVXY

// FEATURE: Orderflow oscilator

// FEATURE: ATR


// ********** BASE SETUP **********
strategy("Trading Levels Assistant", max_labels_count = 500, max_lines_count = 500, overlay=true, initial_capital = 50000)

// ********** INPUTS **********

// Define input for ticker
sym1 = input.symbol("CME_MINI:MNQ1!", "Ticker 1", group="Tickers")
sym2 = input.symbol("AMEX:SPY", "Ticker 2", group="Tickers")

// Define input for pivots
sym1Pivots = input("", title="Pivot", group="Ticker 1 Levels (comma delimited)", inline="line1")
sym1BuyLevels = input("", title="  |  Buy", group="Ticker 1 Levels (comma delimited)", inline="line1")
sym1SellLevels = input("", title="Sell ", group="Ticker 1 Levels (comma delimited)", inline="line2")
sym1IntraDayLevels  = input("", title="  |  Intraday", group="Ticker 1 Levels (comma delimited)", inline="line2")
sym2Pivots = input("", title="Pivot", group="Ticker 2 Levels (comma delimited)", inline="line1")
sym2BuyLevels = input("", title="  |  Buy", group="Ticker 2 Levels (comma delimited)", inline="line1")
sym2SellLevels = input("", title="Sell ", group="Ticker 2 Levels (comma delimited)", inline="line2")
sym2IntraDayLevels  = input("", title="  |  Intraday", group="Ticker 2 Levels (comma delimited)", inline="line2")

// Define input for line settings
pivotsColor = input.color(color.purple, title="Pivot Color", group="Level Settings", inline = "pivots")
pivotsLabel = input("Pivot", title="Pivots Label", group="Level Settings", inline = "pivots")
pivotsWidth = input(2, title="    └ Pivots Width", group="Level Settings", inline = "pwidth")

buyColor = input.color(color.rgb(9, 122, 5), title="Buy Level Color", group="Level Settings", inline = "buy")
buyLabel = input("Buy", title="Buy Level Label", group="Level Settings", inline = "buy")
buyWidth = input(2, title="    └ Buy Level Width", group="Level Settings", inline = "bwidth")

sellColor = input.color(color.rgb(161, 33, 33), title="Sell Level  Color", group="Level Settings", inline = "sell")
sellLabel = input("Sell", title="Sell Level Label", group="Level Settings", inline = "sell")
sellWidth = input(2, title="    └ Sell Level Width", group="Level Settings", inline = "swidth")

intraColor = input.color(color.orange, title="Intraday Color", group="Level Settings", inline = "intra")
intraLabel = input("Intra", title="Intraday Label", group="Level Settings", inline = "intra")
intraWidth = input(2, title="    └ Intraday Width", group="Level Settings", inline = "iwidth")

labelOffset = input(15, title="Label Offset", group="General")
buffer = input.float(15.0, title="Level Bounce Buffer [H-L] (%)", group="General", minval=0, maxval=100) // Define a buffer to avoid false positives due to noise
buySellBuffer = input.float(2, title="Buy/Sell Buffer [0.01x%]", group="General",minval=0, maxval=1000) 
reversalOffset = input.float(1, title="Reversal Buffer [0.01x%]", group="General",minval=0, maxval=1000) 
lowerTF = input.int(3, title="MA Timeframe [min]", group="General",minval=0, maxval=10) 
microTF = input.int(1, title="MA Timeframe [min]", group="General",minval=0, maxval=10) 
crossLookbackTime = input.int(12, title="Crossover Lookback Timeframe [min]", group="General",minval=3, maxval=30) 
bounceLookbackTime = input.int(12, title="Bounce Lookback Timeframe [min]", group="General",minval=3, maxval=30)  
showAllConditions = input(false, title="Show Conditions for Entry (Debug)", group = "General")
showBuySellLevels = input(true, title="Show Buy/Sell (Replay)", group = "General")

showPivotsBounce = input(true, title=" Show Pivot Level Bounce Symbol   |   ", group="Level Bounce (Pivot)", inline="alert")
alertPivotsBounce = input(true, title="Alert on Pivot Bounce", group="Level Bounce (Pivot)",inline="alert")
includeTrigPivots = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Pivot)", inline="pivot")
includeRevPivots = input(true, title="Trigger Reversal", group="Level Bounce (Pivot)", inline="pivot")

showBuyBounce = input(true, title=" Show Buy Level Bounce Symbol   |   ", group="Level Bounce (Buy)", inline="alert")
alertBuyBounce = input(true, title="Alert on Buy Bounce", group="Level Bounce (Buy)",inline="alert")
includeTrigBuy = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Buy)", inline="Buy")
includeRevBuy = input(true, title="Trigger Reversal", group="Level Bounce (Buy)", inline="Buy")

showSellBounce = input(true, title=" Show Sell Level Bounce Symbol   |   ", group="Level Bounce (Sell)", inline="alert")
alertSellBounce = input(true, title="Alert on Sell Bounce", group="Level Bounce (Sell)",inline="alert")
includeTrigSell = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Sell)", inline="Sell")
includeRevSell = input(true, title="Trigger Reversal", group="Level Bounce (Sell)", inline="Sell")

showIntraBounce = input(true, title=" Show Intra Level Bounce Symbol   |   ", group="Level Bounce (Intra)", inline="alert")
alertIntraBounce = input(true, title="Alert on Intra Bounce", group="Level Bounce (Intra)",inline="alert")
includeTrigIntra = input(true, title="Trigger Buy/Sell   |   ", group="Level Bounce (Intra)", inline="Intra")
includeRevIntra = input(true, title="Trigger Reversal", group="Level Bounce (Intra)", inline="Intra")

// Define EMA/SMA settings
periodFastMA = input(8, title="Fast MA Period", group="Moving Averages", inline="fast")
colorFastMA = input.color(color.new(color.fuchsia,75), title="Fast MA Color", group="Moving Averages", inline="fast")
typeFastMA = input.string("EMA", title="    └ Fast MA Type", options=["EMA", "SMA"], group="Moving Averages", inline="tfast")

periodSlowMA = input(21, title="Slow MA Period", group="Moving Averages", inline="slow")
colorSlowMA = input.color(color.new(color.green,75), title="Slow MA Color", group="Moving Averages", inline="slow")
typeSlowMA = input.string("EMA", title="    └ Slow MA Type", options=["EMA", "SMA"], group="Moving Averages", inline="tslow")

periodConfirmMA = input(13, title="Confirm MA Period", group="Moving Averages", inline="confirm")
colorConfirmMA = input.color(color.new(color.red,75), title="Confirm MA Color", group="Moving Averages", inline="confirm")
typeConfirmMA = input.string("SMA", title="    └ Confirm MA Type", options=["EMA", "SMA"], group="Moving Averages", inline="tconfirm")

alertDirectionalBuySell = input(true, title="Buy/Sell", group="Alerts", inline="main")
alertReversalBuySell = input(true, title="Buy/Sell (Reversal)", group="Alerts", inline="main")
alertCrossBuySell = input(true, title="Buy/Sell (Cross)", group="Alerts", inline="main")

show_table      = input.bool(true,"Show Dashboard", group="Dashboard", inline="Table")
tableLocation   = input.string(defval='Bottom right', options=['Top left', 'Top center', 'Top right', 'Bottom left', 'Bottom center', 'Bottom right'], title='| Location', group="Dashboard", inline="Table")
tablePosition   = tableLocation == 'Top left' ? position.top_left : tableLocation == 'Top center' ? position.top_center : tableLocation == 'Top right' ? position.top_right : tableLocation == 'Bottom left' ? position.bottom_left : tableLocation == 'Bottom center' ? position.bottom_center : position.bottom_right
table_font_size       = input.string('Normal', "    └ Font Size", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large'], group="Dashboard", inline = 'line2')
table_bgcolor       = input.color(color.gray, title="Background Color", group="Dashboard", inline="line3")
table_fontcolor       = input.color(color.white, title="  |  Font Color", group="Dashboard", inline="line3")

// ********** GLOBAL VARIABLES *********
var int trendDirection = 0
var displayTable = table.new(tablePosition, 2, 6, border_width=1, bgcolor = table_bgcolor)
var float bounceLevel = na
var int systemState = 0
var bool lastCrossDir = na

// ********** FUNCTIONS **********
draw_line(_x1, _y1, _x2, _y2, _xloc, _extend, _color, _style, _width) =>
    dline = line.new(x1=_x1, y1=_y1, x2=_x2, y2=_y2, xloc=_xloc, extend=_extend, color=_color, style=_style, width=_width)
    line.delete(dline[1])

draw_label(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>
    dlabel = label.new(x=_x, y=_y, text=_text, xloc=_xloc, yloc=_yloc, color=_color, style=_style, textcolor=_textcolor, size=_size, textalign=_textalign, tooltip=_tooltip)
    
check_bounce_high(level) =>
    highBounce = high >= level and close < level - (high - low) * (buffer/100) and (open <= level + (high - low) * (buffer/100)) and barstate.isconfirmed

check_bounce_low(level) =>
    lowBounce = low <= level and close > level + (high - low) * (buffer/100) and (open >= level - (high - low) * (buffer/100)) and barstate.isconfirmed

check_levels_low(levels, bounceType, symbolEnabled) =>    
    plotLevels = str.split(levels, ",")
    anyBounce = false
    for level in plotLevels
        if check_bounce_low(str.tonumber(level))
            anyBounce := true
            if symbolEnabled
                draw_label(bar_index, str.tonumber(level), bounceType, xloc.bar_index, yloc.belowbar,  color.green, label.style_label_up, color.white, size.small, text.align_center, '')
    result = anyBounce

check_levels_high(levels, bounceType, symbolEnabled) =>    
    plotLevels = str.split(levels, ",")
    anyBounce = false
    for level in plotLevels
        if check_bounce_high(str.tonumber(level))
            anyBounce := true
            if symbolEnabled
                draw_label(bar_index, str.tonumber(level), bounceType, xloc.bar_index, yloc.abovebar,  color.red, label.style_label_down, color.white, size.small, text.align_center, '')
    result = anyBounce

check_optimal_level(levels, symbolEnabled) =>    
    plotLevels = str.split(levels, ",")
    optLevel = 0.0
    if symbolEnabled
        for level in plotLevels
            if math.abs(str.tonumber(level) - close) < (close * buySellBuffer/10000)
                optLevel := str.tonumber(level)
                
    result = optLevel

draw_levels(levels, color, width, label, labeloffset) =>
    plotLevels = str.split(levels, ",")
    for level in plotLevels
        draw_line(bar_index, str.tonumber(level), bar_index + labeloffset + 15, str.tonumber(level),  xloc.bar_index, extend.left, color, line.style_solid, width)
        if barstate.islast
            plot_label = label.new(bar_index + labeloffset + 10, str.tonumber(level))
            label.set_text(plot_label, label)
            label.set_style(plot_label, label.style_none)
            label.set_textcolor(plot_label, color)
            label.delete(plot_label[1])
    
f_fillCell(_row, _column,series string _cellText) =>
    switch table_font_size
        "Auto" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.auto)
        "Tiny" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.tiny)
        "Small" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.small)
        "Normal" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.normal)
        "Large" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color.new(chart.bg_color,50), text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.large)

f_fillCellColor(_row,_column, color) =>
    table.cell(displayTable,_column,_row, bgcolor=color)

f_fillCellColorText(_row, _column, series string _cellText, color) =>
    switch table_font_size
        "Auto" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.auto)
        "Tiny" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.tiny)
        "Small" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.small)
        "Normal" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.normal)
        "Large" => table.cell(displayTable, _column, _row, _cellText, bgcolor=color, text_color=table_fontcolor, text_halign = text.align_left, text_valign = text.align_center, text_size = size.large)

extractSymbolName(simple string sym) =>
    pos = str.pos(sym, ":")  // Get position of ":" character
    tkr= str.substring(sym, pos+1)


// Function to convert timeframe to minutes
getTimeframeInMinutes() =>
    // Initialize variable for minutes
    var float minutes = na
    // Check if timeframe is in minutes, hours, or days and convert accordingly
    if str.contains(timeframe.period, "D")
        minutes := str.tonumber(str.replace(timeframe.period, "D", "")) * 1440
    else if str.contains(timeframe.period, "H")
        minutes := str.tonumber(str.replace(timeframe.period, "H", "")) * 60
    else if str.contains(timeframe.period, "M")
        minutes := str.tonumber(str.replace(timeframe.period, "M", ""))
    else
        // Assuming direct minute timeframes like "15", "5", etc.
        minutes := str.tonumber(timeframe.period)
    // Return calculated minutes
    minutes

// ********** LEVEL RENDERING **********
// Check if symbol matches the selected ticker
if ticker.standard() == sym1
    draw_levels(sym1Pivots, pivotsColor, pivotsWidth, pivotsLabel, labelOffset)
    draw_levels(sym1BuyLevels, buyColor, buyWidth, buyLabel, labelOffset)
    draw_levels(sym1SellLevels, sellColor, sellWidth, sellLabel, labelOffset)
    draw_levels(sym1IntraDayLevels, intraColor, intraWidth, intraLabel, labelOffset)

if ticker.standard() == sym2
    draw_levels(sym2Pivots, pivotsColor, pivotsWidth, pivotsLabel, labelOffset)
    draw_levels(sym2BuyLevels, buyColor, buyWidth, buyLabel, labelOffset)
    draw_levels(sym2SellLevels, sellColor, sellWidth, sellLabel, labelOffset)
    draw_levels(sym2IntraDayLevels, intraColor, intraWidth, intraLabel, labelOffset)

// ********** LEVEL BOUNCE CHECK **********
anyPivotSym1BounceUp = false
anyBuySym1BounceUp = false
anySellSym1BounceUp = false
anyIntraSym1BounceUp = false

anyPivotSym1BounceDown = false
anyBuySym1BounceDown = false
anySellSym1BounceDown = false
anyIntraSym1BounceDown = false

anyPivotSym2BounceUp = false
anyBuySym2BounceUp = false
anySellSym2BounceUp = false
anyIntraSym2BounceUp = false

anyPivotSym2BounceDown = false
anyBuySym2BounceDown = false
anySellSym2BounceDown = false
anyIntraSym2BounceDown = false

if ticker.standard() == sym1
    anyPivotSym1BounceUp := check_levels_low(sym1Pivots, pivotsLabel, showPivotsBounce)
    anyPivotSym1BounceDown := check_levels_high(sym1Pivots, pivotsLabel, showPivotsBounce)
    anyBuySym1BounceUp := check_levels_low(sym1BuyLevels, buyLabel, showBuyBounce)
    anyBuySym1BounceDown := check_levels_high(sym1BuyLevels, buyLabel, showBuyBounce)
    anySellSym1BounceUp := check_levels_low(sym1SellLevels, sellLabel, showSellBounce)
    anySellSym1BounceDown := check_levels_high(sym1SellLevels, sellLabel, showSellBounce)
    anyIntraSym1BounceUp := check_levels_low(sym1IntraDayLevels, intraLabel, showIntraBounce)
    anyIntraSym1BounceDown := check_levels_high(sym1IntraDayLevels, intraLabel, showIntraBounce)

if ticker.standard() == sym2
    anyPivotSym2BounceUp := check_levels_low(sym2Pivots, pivotsLabel, showPivotsBounce)
    anyPivotSym2BounceDown := check_levels_high(sym2Pivots, pivotsLabel, showPivotsBounce)
    anyBuySym2BounceUp := check_levels_low(sym2BuyLevels, buyLabel, showBuyBounce)
    anyBuySym2BounceDown := check_levels_high(sym2BuyLevels, buyLabel, showBuyBounce)
    anySellSym2BounceUp := check_levels_low(sym2SellLevels, sellLabel, showSellBounce)
    anySellSym2BounceDown := check_levels_high(sym2SellLevels, sellLabel, showSellBounce)
    anyIntraSym2BounceUp := check_levels_low(sym2IntraDayLevels, intraLabel, showIntraBounce)
    anyIntraSym2BounceDown := check_levels_high(sym2IntraDayLevels, intraLabel, showIntraBounce)

anyPivotSym1Bounce = anyPivotSym1BounceUp or anyPivotSym1BounceDown
anyBuySym1Bounce = anyBuySym1BounceUp or anyBuySym1BounceDown
anySellSym1Bounce = anySellSym1BounceUp or anySellSym1BounceDown
anyIntraSym1Bounce = anyIntraSym1BounceUp or anyIntraSym1BounceDown

anyPivotSym2Bounce = anyPivotSym2BounceUp or anyPivotSym2BounceDown
anyBuySym2Bounce = anyBuySym2BounceUp or anyBuySym2BounceDown
anySellSym2Bounce = anySellSym2BounceUp or anySellSym2BounceDown
anyIntraSym2Bounce = anyIntraSym2BounceUp or anyIntraSym2BounceDown

anySym1BounceUp = (anyPivotSym1BounceUp and includeTrigPivots) or (anyBuySym1BounceUp and includeTrigBuy) or (anySellSym1BounceUp and includeTrigSell) or (anyIntraSym1BounceUp and includeTrigIntra)
anySym1BounceDown = (anyPivotSym1BounceDown and includeTrigPivots) or (anyBuySym1BounceDown and includeTrigBuy) or (anySellSym1BounceDown and includeTrigSell) or (anyIntraSym1BounceDown and includeTrigIntra)

anySym2BounceUp = (anyPivotSym2BounceUp and includeTrigPivots) or (anyBuySym2BounceUp and includeTrigBuy) or (anySellSym2BounceUp and includeTrigSell) or (anyIntraSym2BounceUp and includeTrigIntra)
anySym2BounceDown = (anyPivotSym2BounceDown and includeTrigPivots) or (anyBuySym2BounceDown and includeTrigBuy) or (anySellSym2BounceDown and includeTrigSell) or (anyIntraSym2BounceDown and includeTrigIntra)

anySym1BounceUpRev = (anyPivotSym1BounceUp and includeRevPivots) or (anyBuySym1BounceUp and includeRevBuy) or (anySellSym1BounceUp and includeRevSell) or (anyIntraSym1BounceUp and includeRevIntra)
anySym1BounceDownRev = (anyPivotSym1BounceDown and includeRevPivots) or (anyBuySym1BounceDown and includeRevBuy) or (anySellSym1BounceDown and includeRevSell) or (anyIntraSym1BounceDown and includeRevIntra)

anySym2BounceUpRev = (anyPivotSym2BounceUp and includeRevPivots) or (anyBuySym2BounceUp and includeRevBuy) or (anySellSym2BounceUp and includeRevSell) or (anyIntraSym2BounceUp and includeRevIntra)
anySym2BounceDownRev = (anyPivotSym2BounceDown and includeRevPivots) or (anyBuySym2BounceDown and includeRevBuy) or (anySellSym2BounceDown and includeRevSell) or (anyIntraSym2BounceDown and includeRevIntra)

// ********** EMA RENDERING **********
fastMA = typeFastMA == "EMA" ? request.security(syminfo.tickerid, str.tostring(lowerTF), ta.ema(close, periodFastMA)) : request.security(syminfo.tickerid, str.tostring(lowerTF), ta.sma(close, periodFastMA))
slowMA = typeSlowMA == "EMA" ? request.security(syminfo.tickerid, str.tostring(lowerTF), ta.ema(close, periodSlowMA)) : request.security(syminfo.tickerid, str.tostring(lowerTF), ta.sma(close, periodSlowMA))
confirmMA = typeConfirmMA == "EMA" ? request.security(syminfo.tickerid, str.tostring(lowerTF), ta.ema(close, periodConfirmMA)) : request.security(syminfo.tickerid, str.tostring(lowerTF), ta.sma(close, periodConfirmMA))

// Plot MAs
plot(fastMA, color=colorFastMA, title="Fast MA")
plot(slowMA, color=colorSlowMA, title="Slow MA")
plot(confirmMA, color=colorConfirmMA, title="Confirm MA")

// ********** EMA ANALYSIS **********
fastCrossSlowUp = ta.crossover(fastMA, slowMA)
fastCrossSlowDown = ta.crossunder(fastMA, slowMA)
priceAboveConfirm = close > confirmMA
priceBelowConfirm = close < confirmMA

if (fastMA > slowMA)
    trendDirection := 1
else if (fastMA < slowMA)
    trendDirection := -1
else
    trendDirection := 0

// **********ENTRY CONDITIONS **********
if ticker.standard() == sym1
    priceOptimalEntryLevel1 = check_optimal_level(sym1Pivots, includeTrigPivots)
    priceOptimalEntryLevel2 = check_optimal_level(sym1BuyLevels, includeTrigBuy)
    priceOptimalEntryLevel3 = check_optimal_level(sym1SellLevels, includeTrigSell)
    priceOptimalEntryLevel4 = check_optimal_level(sym1IntraDayLevels, includeTrigIntra)
    if priceOptimalEntryLevel1 > 0
        bounceLevel := priceOptimalEntryLevel1
    if priceOptimalEntryLevel2 > 0
        bounceLevel := priceOptimalEntryLevel2
    if priceOptimalEntryLevel3 > 0
        bounceLevel := priceOptimalEntryLevel3
    if priceOptimalEntryLevel4 > 0
        bounceLevel := priceOptimalEntryLevel4

priceCandleBufferEntry = (high - low) * buffer/100
priceOptimalBufferEntry = (close) * buySellBuffer/10000
priceOptimalEntryConfirm = math.abs(close - confirmMA) < (close * buySellBuffer/10000)
priceOptimalEntryLevel = math.abs(close- bounceLevel) < (close * buySellBuffer/10000)

buyCondition = priceOptimalEntryLevel
sellCondition = priceOptimalEntryLevel
buyRevCondition =  priceOptimalEntryLevel
sellRevCondition = priceOptimalEntryLevel
buyCrossCondition =  priceOptimalEntryLevel or priceOptimalEntryConfirm
sellCrossCondition = priceOptimalEntryLevel or priceOptimalEntryConfirm

// ********** SIGNALS **********
buySignal = false
buyReversalSignal = false
sellSignal = false
sellReversalSignal = false
buyCrossSignal = false
sellCrossSignal = false
crossSignalLookback = math.floor(crossLookbackTime / getTimeframeInMinutes())
bufferBuySellLookback = math.floor(bounceLookbackTime / getTimeframeInMinutes())

// If trend is up and we get a bounce up we have a buy directional else its reversal
if ticker.standard() == sym1
    buySignal := trendDirection >= 1 and anySym1BounceUp
    sellSignal := trendDirection <= -1 and anySym1BounceDown 
    buyReversalSignal := trendDirection <= -1 and anySym1BounceUpRev
    sellReversalSignal := trendDirection >= 1 and anySym1BounceDownRev

// Look back over the last 2 bars to see if we had a trigger once we get a cross
if fastCrossSlowDown
    lastCrossDir := false
    for i = 0 to crossSignalLookback
        if anySym1BounceDown[i]
            sellCrossSignal := true

if fastCrossSlowUp
    lastCrossDir := true
    for i = 0 to crossSignalLookback
        if anySym1BounceUp[i] 
            buyCrossSignal := true

// ********** DASHBOARD **********
ticker1_price  = request.security(sym1, timeframe.period, math.round_to_mintick(close))
ticker2_price  = request.security(sym2, timeframe.period, math.round_to_mintick(close))

if barstate.islast and show_table
    f_fillCell(0, 0, "Confirm")
    f_fillCell(1, 0, "Trend")
    f_fillCell(2, 0, extractSymbolName(sym1))
    f_fillCell(3, 0, extractSymbolName(sym2))
    f_fillCell(4, 0, "Entry")

    f_fillCellColor(0,1,priceAboveConfirm ? color.green : color.red)
    f_fillCellColor(1,1,trendDirection >= 1 ? color.green : (trendDirection <= -1 ? color.red : color.gray))
    f_fillCell(2, 1, str.tostring(ticker1_price))
    f_fillCell(3, 1, str.tostring(ticker2_price))
    f_fillCellColorText(4, 1, str.tostring(priceOptimalBufferEntry), priceOptimalEntryConfirm ? color.green : color.gray)
    //TODO: Add symbol to show trend of both tickers

// ****** STRATEGY ********
var int startOfLastPeriod = timestamp(year(timenow), month(timenow), dayofmonth(timenow), 00, 00) // Adjust the hour and minute as needed
var int endOfLastPeriod = timenow // Current time represents the end of the period
inPeriod = time >= startOfLastPeriod and time <= endOfLastPeriod
allowedTimes() => time(timeframe = timeframe.period, session = "0930-1600", timezone = "America/New_York")
bool validTriggerPeriod = allowedTimes() and inPeriod
// Set the stop-loss and take-profit levels
var float stopLoss = na
var float takeProfit1 = na
var float takeProfit2 = na
var float takeProfit3 = na
var float stopLossShort = na
var float takeProfit1Short = na
var float takeProfit2Short = na
var float takeProfit3Short = na
var float limitLevel = na
SL = 15
TP1 = 15
TP2 = 30
TP3 = 45

buyTriggeredInLookback = false
sellTriggeredInLookback = false
systemState := 0

buyReversalCount = 0
sellReversalCount = 0

for i = 0 to bufferBuySellLookback
    if buySignal[i]
        buyTriggeredInLookback := true
    if sellSignal[i]
        sellTriggeredInLookback := true
    if buyReversalSignal[i]
        buyTriggeredInLookback := true
        buyReversalCount += 1
    if sellSignal[i] or sellReversalSignal[i]
        sellTriggeredInLookback := true
        sellReversalCount += 1

// BUG: Check current price before setting limit order with func
for i = 0 to bufferBuySellLookback
    if buySignal[i] and not sellTriggeredInLookback
        systemState := 2
        limitLevel := math.floor(bounceLevel * (1 + buySellBuffer/10000))
    else if sellSignal[i] and not buyTriggeredInLookback
        systemState := 12
        limitLevel := math.floor(bounceLevel * (1 - buySellBuffer/10000))
    else if buyCrossSignal[i] and lastCrossDir
        systemState := 3
        limitLevel := math.floor(confirmMA * (1 + buySellBuffer/10000))
    else if sellCrossSignal[i] and not lastCrossDir
        systemState := 13
        limitLevel := math.floor(confirmMA * (1 - buySellBuffer/10000))
    else if buyReversalSignal[i] and not sellTriggeredInLookback
        systemState := 4
        limitLevel := math.floor(bounceLevel * (1 + reversalOffset/10000))
    else if sellReversalSignal[i] and not buyTriggeredInLookback
        systemState := 14
        limitLevel := math.floor(bounceLevel * (1 - reversalOffset/10000))

buyLong = systemState == 2
sellShort = systemState == 12
buyCross = systemState == 3
sellCross = systemState == 13
buyReversal = systemState == 4
sellReversal = systemState == 14

stopLoss := limitLevel - SL
takeProfit1 := limitLevel + TP1 
takeProfit2 := limitLevel + TP2
takeProfit3 := limitLevel + TP3

stopLossShort := limitLevel + SL
takeProfit1Short := limitLevel - TP1
takeProfit2Short := limitLevel - TP2
takeProfit3Short := limitLevel - TP3

// ********** RENDERING SYMBOLS **********
if showAllConditions
    if priceOptimalEntryLevel and false
        draw_label(bar_index, close, 'Optimal Level', xloc.bar_index, yloc.abovebar,  color.yellow, label.style_cross, color.white, size.small, text.align_center, '')
    if priceOptimalEntryConfirm and false
        draw_label(bar_index, close, 'Confirm Level', xloc.bar_index, yloc.abovebar,  color.maroon, label.style_cross, color.white, size.small, text.align_center, '')
    if fastCrossSlowDown 
        draw_label(bar_index, close, 'DownCross', xloc.bar_index, yloc.abovebar,  color.fuchsia, label.style_cross, color.white, size.small, text.align_center, '')
    if fastCrossSlowUp 
        draw_label(bar_index, close, 'UpCross', xloc.bar_index, yloc.belowbar,  color.aqua, label.style_cross, color.white, size.small, text.align_center, '')


if systemState != systemState[1] and systemState[1] > 0 and systemState > 0 and ((systemState < 10 and systemState[1] > 10) or (systemState > 10 and systemState[1] < 10)) and validTriggerPeriod 
    if showBuySellLevels
        draw_label(bar_index, limitLevel, "Close Position: " + str.tostring(systemState[1]) + "->" + str.tostring(systemState), xloc.bar_index, yloc.abovebar,  color.rgb(110, 0, 137), label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.teal, label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertDirectionalBuySell
        alert("Close Position", alert.freq_once_per_bar)

if buyLong and validTriggerPeriod
    if showBuySellLevels
        draw_label(bar_index, limitLevel, "Buy (Directional) at " + str.tostring(limitLevel), xloc.bar_index, yloc.abovebar,  color.teal, label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.teal, label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertDirectionalBuySell
        alert("Directional Buy Alert", alert.freq_once_per_bar)

if buyCross and validTriggerPeriod
    if showBuySellLevels
        draw_label(bar_index, close, "Buy (Cross) at " + str.tostring(limitLevel), xloc.bar_index, yloc.abovebar,  color.rgb(17, 141, 129), label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.rgb(17, 141, 129), label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertCrossBuySell
        alert("Cross Buy Alert", alert.freq_once_per_bar)

if buyReversal and validTriggerPeriod and buyReversalCount > 1
    if showBuySellLevels
        draw_label(bar_index, close, "Buy (Reversal) at " + str.tostring(limitLevel), xloc.bar_index, yloc.abovebar,  color.rgb(17, 141, 129), label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.rgb(17, 141, 129), label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertCrossBuySell
        alert("Reversal Buy Alert", alert.freq_once_per_bar)

if sellShort and validTriggerPeriod
    if showBuySellLevels
        draw_label(bar_index, close, "Sell (Directional) at " + str.tostring(limitLevel), xloc.bar_index, yloc.abovebar,  color.rgb(129, 21, 21), label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.rgb(129, 21, 21), label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertDirectionalBuySell
        alert("Directional Sell Alert", alert.freq_once_per_bar)

if sellCross and validTriggerPeriod
    if showBuySellLevels
        draw_label(bar_index, close, "Sell (Cross) at " + str.tostring(limitLevel), xloc.bar_index, yloc.abovebar,  color.rgb(173, 30, 30), label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.rgb(173, 30, 30), label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertCrossBuySell
        alert("Cross Sell Alert", alert.freq_once_per_bar)

if sellReversal and validTriggerPeriod and sellReversalCount > 1
    if showBuySellLevels
        draw_label(bar_index, close, "Sell (reversal) at " + str.tostring(limitLevel), xloc.bar_index, yloc.abovebar,  color.rgb(173, 30, 30), label.style_text_outline, color.white, size.small, text.align_center, '')
        draw_label(bar_index, limitLevel, "", xloc.bar_index, yloc.price,  color.rgb(173, 30, 30), label.style_cross, color.white, size.tiny, text.align_center, '')
    if alertReversalBuySell
        alert("Reversal Sell Alert", alert.freq_once_per_bar)


// ***** PLOT SHAPES *****
plotshape(series=close, style=shape.labelup, location=location.bottom, color= systemState == 2 and validTriggerPeriod  ? color.green : na, size=size.small)
plotshape(series=close, style=shape.flag, location=location.bottom, color= buyReversalSignal ? color.green : na, size=size.small)
plotshape(series=close, style=shape.triangleup, location=location.bottom, color= systemState == 3 and validTriggerPeriod  ? color.green : na, size=size.small)
plotshape(series=close, style=shape.labeldown, location=location.top, color= systemState == 12 and validTriggerPeriod  ? color.red : na, size=size.small)
plotshape(series=close, style=shape.flag, location=location.top, color= sellReversalSignal ? color.red : na, size=size.small)
plotshape(series=close, style=shape.triangledown, location=location.top, color= systemState == 13 and validTriggerPeriod  ? color.red : na, size=size.small)

// ********** ALERTS **********
if (anyPivotSym1Bounce or anyPivotSym2Bounce) and alertPivotsBounce
    alert("Bounce off pivot level at" + str.tostring(bounceLevel), alert.freq_once_per_bar_close)

if (anyBuySym1Bounce or anyBuySym2Bounce) and alertBuyBounce
    alert("Bounce off buy level at" + str.tostring(bounceLevel), alert.freq_once_per_bar_close)

if (anySellSym1Bounce or anySellSym2Bounce) and alertSellBounce
    alert("Bounce off sell level at" + str.tostring(bounceLevel), alert.freq_once_per_bar_close)

if (anyIntraSym1Bounce or anyIntraSym2Bounce) and alertIntraBounce
    alert("Bounce off intra level at"  + str.tostring(bounceLevel), alert.freq_once_per_bar_close)


// ********** STRATEGY **********
if systemState != systemState[1] and systemState[1] > 0 and systemState > 0 and ((systemState < 10 and systemState[1] > 10) or (systemState > 10 and systemState[1] < 10)) and validTriggerPeriod 
    strategy.close_all()
else if systemState == 0
    strategy.cancel_all()

// TODO: Track level of fill and if TP1 + 5 is passed, move SL to BE. If close > limit + TPs then close all
    // TODO: Switch to FIFO to handle orders
if (buyLong or buyCross or (buyReversal and buyReversalCount > 1 )) and validTriggerPeriod
    if strategy.position_size == 0
        strategy.order("Buy", strategy.long, qty=5, limit = limitLevel)
        strategy.exit("Exit", "Buy", limit = takeProfit1, stop = stopLoss, qty = 5)

else if (sellShort or sellCross or (sellReversal and sellReversalCount > 1 )) and validTriggerPeriod
    if strategy.position_size == 0
        strategy.order("Sell", strategy.short, qty=5, limit = limitLevel)
        strategy.exit("Exit Sell1", "Sell", limit = takeProfit1Short, stop = stopLossShort, qty = 5)

// Exit for the first 2 contracts
plot(stopLossShort, "SL", strategy.position_size < 0 ? color.red : na, style = plot.style_circles)
plot(takeProfit1Short, "TP1", strategy.position_size < 0 ? color.green : na, style = plot.style_circles)
plot(takeProfit2Short, "TP2", strategy.position_size < 0 ? color.green:na, style = plot.style_circles)
plot(takeProfit3Short, "TP3", strategy.position_size < 0 ? color.green:na, style = plot.style_circles)

plot(stopLoss, "SL", strategy.position_size > 0 ? color.red : na, style = plot.style_circles)
plot(takeProfit1, "TP1", strategy.position_size > 0 ? color.green : na, style = plot.style_circles)
plot(takeProfit2, "TP2", strategy.position_size > 0 ? color.green:na, style = plot.style_circles)
plot(takeProfit3, "TP3", strategy.position_size > 0 ? color.green:na, style = plot.style_circles)